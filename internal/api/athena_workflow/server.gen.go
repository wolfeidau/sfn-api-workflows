// Package athena_workflow provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package athena_workflow

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Sigv4Scopes = "sigv4.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Error message
	Message string `json:"message"`
}

// RunAthenaQueryTemplateRequest defines model for RunAthenaQueryTemplateRequest.
type RunAthenaQueryTemplateRequest struct {
	// Query Athena query parameters which are passed as is to the Athena API
	Query *struct {
		// Parameters A list of values for the parameters in an Athena query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.
		Parameters *[]string `json:"parameters,omitempty"`
	} `json:"query,omitempty"`

	// TemplateData Data to be passed to the Go template.
	TemplateData *map[string]interface{} `json:"template_data,omitempty"`

	// TemplateQuery Template using Go template syntax, which is used to generate the Athena query.
	TemplateQuery string `json:"template_query"`

	// WaitForCompletion If true the operation will wait for the query to complete before returning the results.
	WaitForCompletion bool `json:"wait_for_completion"`
}

// RunAthenaQueryTemplateResponse defines model for RunAthenaQueryTemplateResponse.
type RunAthenaQueryTemplateResponse struct {
	QueryExecutionId    string  `json:"query_execution_id"`
	QueryExecutionState *string `json:"query_execution_state,omitempty"`
	ResultPath          *string `json:"result_path,omitempty"`
}

// RunS3AthenaQueryTemplateRequest defines model for RunS3AthenaQueryTemplateRequest.
type RunS3AthenaQueryTemplateRequest struct {
	// Parameters A list of values for the parameters in an Athena query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.
	Parameters *[]string `json:"parameters,omitempty"`

	// TemplateData Data to be passed to the Go template.
	TemplateData     *map[string]interface{} `json:"template_data,omitempty"`
	TemplateS3Params *struct {
		// Bucket The S3 bucket where the templates is stored.
		Bucket string `json:"bucket"`

		// Name The name of the template file to execute.
		Name string `json:"name"`

		// ParsePatterns List of patterns to parse template files from the S3 bucket, this allows you to use includes to split the template into multiple files.
		ParsePatterns []string `json:"parse_patterns"`
	} `json:"template_s3_params,omitempty"`

	// WaitForCompletion If true the operation will wait for the query to complete before returning the results.
	WaitForCompletion bool `json:"wait_for_completion"`
}

// RunAthenaQueryTemplateJSONRequestBody defines body for RunAthenaQueryTemplate for application/json ContentType.
type RunAthenaQueryTemplateJSONRequestBody = RunAthenaQueryTemplateRequest

// RunS3AthenaQueryTemplateJSONRequestBody defines body for RunS3AthenaQueryTemplate for application/json ContentType.
type RunS3AthenaQueryTemplateJSONRequestBody = RunS3AthenaQueryTemplateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /athena/run_query_template)
	RunAthenaQueryTemplate(ctx echo.Context) error

	// (POST /athena/run_s3_query_template)
	RunS3AthenaQueryTemplate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RunAthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunAthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunAthenaQueryTemplate(ctx)
	return err
}

// RunS3AthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunS3AthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunS3AthenaQueryTemplate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/athena/run_query_template", wrapper.RunAthenaQueryTemplate)
	router.POST(baseURL+"/athena/run_s3_query_template", wrapper.RunS3AthenaQueryTemplate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS28bNxD+KwSb49qyo+ayNwdpAqEt6lopcggCYbQ70jKhyA2HlKwY+u/FkPvQY+U6",
	"QNMWbW8SOfw4r+/jSA+ysKvaGjSeZP4gqahwBfHjD85Zd4dUW0PIC7WzNTqvMG6vkAiWcaNEKpyqvbJG",
	"5umcaLcz6bc1ylySd8os5W6XSYefg3JYyvx9B/Nhl8m7YG58hQZ+Dei2b3FVa/B4h58Dkj/14DNbnd6f",
	"IETcFTU4WKFHR2JTqaIS4FDUQISlABKKhLfCVyiaUze3E5kd3dNjDFwmtCIv7EKsQQcksbAu4u1drIwA",
	"I/bduhRvK2xPsEdQ11phKYhjNV6B1tvWs0MkXkmhNV+sK9HxlxTf0QlbFMFdykwqj6vo/1E5uvqAc7CN",
	"5WkW7PwjFj5aNJWYleDhNAevwAM7O+8y23j+xor26KV8DPdMJdsOEIGUWe7DCdoaD/dZE7QiEZp7l2jQ",
	"scVeUVPOT1sxkxtQfrawbsYs0JjuPXZjshDehYTIfQG8LjZKa8Hnu5KnsngrGjAUc1xYh8KhD85wCGzm",
	"kIL2tOfP3FqNYE64cZSfYXc/DCT2HJHOcTniz/Aei8CYM1UOdsqxGXnwOGiZYpzV4KuB/aMwB24/E9R0",
	"/DX68J/i7V/AUhrPood0mup5KD6hH2BwhWI6FmlbbCp0iUYtZlRg8tZhOchPAyscRuUdLt8+mlgojRxW",
	"6iUchKzBEXJnenRmoDN+avqitWC8eObwGhILZ1fx+i7ATPhKkQCt7YbE1gY+GwiFMoUOJUYsqrXyh24r",
	"461YBe1VrRv0x0u/UmaSNq8H9HufW01hmkyeRD/Es3+2JtJ41ubtyYK4yyRhEZzy2ynPN6lnSS3X3/MH",
	"xQFVCCW6NlG5vAm+sk59iYH1bkGtfkSW4vsLWMEXay6gVkvwuIHtBQRftXYbmkb8Hd+uzMIOaNDtpCF/",
	"7exacX8wdflbgRSfvI11nxbabkSFumYhy6RXXmM/5rxrLdLkskZHCf368uryiutpazRQK5nLcVziJvBV",
	"TMEIIsjIBZPemD63THFLA5T+jVj7Dh5jVpWgdCnAlMIFI9rpy3byGXdiyWm/4A1jCjBirm3xKdo93kCZ",
	"sK6B2jOYvIpHeaEArdFFzNpq3SHxaxVii3UNOyllfuaxlKntkPxLW8bZpLDGo4kZibJfRIjRR0r8SJMz",
	"f3rmcCFz+d2oH61HzVw9enzEjc1yqnX9u5D1SedwU/lEiR6UjqH1VGF6ppc4Pvqx3s+vrr55JM2McSaU",
	"VC0HRlAouMsXQev4fL34E307/Oky4MrEsP6BFlN0a3QiHkhePP8bM/QSSvEmiUnWMqdpdWj6V1hfITf0",
	"UQoFWcG0AaXT08487PhxoIEyf9+p3/sPO9ZLWBKLa+onVtAheVPG4zIRh0OvvK9/Rl9ZJtHtL9O3UVmI",
	"fOVsWFYvsYK1sk7m0uA6SmuvjbPa2XuW0eAUY702eT4N8/iMmfzZw827aZ7fgvOKb9vlvRft5h0u446G",
	"1byEnCVt9Pzq+sXF1fhifD1aBFPwURo9e0iJbIXyplavm83LG8cIao0jZdY2FZm4MLvsQBtp/GR5vAuG",
	"Ov3ryNr9TNEWSizT7DAd/7FADsrV4Bj87QTr0an7CZJFY5Fe4n+ZZv1Pqa+i1K5Lypl/bLphxyGXpewH",
	"S+rnsiafuzMJbShwsQatSvAxV6C1fKJ17Di2zx9ks9h2emIVd2h2vHW790MztvBu93sAAAD///kFKEBY",
	"EwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
