AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >-
  This template creates API Gateway and Lambda resources for the backend service.

Parameters:
  AppName:
    Type: String
    Description: The name of the application.
    Default: "sfn-api-powered-workflows"

  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: "dev"

  Branch:
    Type: String
    Default: "master"

  AthenaDatabase:
    Type: String

  AthenaCatalog:
    Type: String

  AthenaWorkGroup:
    Type: String

  DataBucketName:
    Type: String

  ResultsBucketName:
    Type: String

  RetentionInDays:
    Type: Number
    Default: 14

  DataTracing:
    Type: String
    Default: false

Outputs:
  AthenaWorkflowAPIURL:
    Value: !Sub "https://${AthenaWorkflowApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  QueryTemplatesBucket:
    Value: !Ref QueryTemplatesBucket

Globals:
  Function:
    Runtime: provided.al2
    Architectures:
      - arm64
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        APP_NAME: !Ref AppName
        STAGE: !Ref Stage
        BRANCH: !Ref Branch

Resources:
  AthenaWorkflowApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref AWS::StackName
      EndpointConfiguration:
        Type: REGIONAL
      # Use DefinitionBody for swagger file so that we can use CloudFormation intrinsic functions within the swagger file
      DefinitionBody:
        "Fn::Transform":
          Name: "AWS::Include"
          Parameters:
            Location: "../../openapi/athena-workflow.yaml"
      StageName: Prod
      TracingEnabled: true # Enable AWS X-Ray to help debug API requests
      AccessLogSetting:
        DestinationArn: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AthenaWorkflowApiAccessLogGroup}"
        Format: '{"source_ip":"$context.identity.sourceIp","http_method":"$context.httpMethod","path":"$context.path","status":"$context.status","response_length":"$context.responseLength","response_latency":"$context.responseLatency","request_time":"$context.requestTime","protocol":"$context.protocol","user_agent":"$context.identity.userAgent","request_id":"$context.requestId","user":"$context.identity.user","user_arn":"$context.identity.userArn","integration_latency":"$context.integration.latency"}'
          # {
          #   "stage":"$context.stage",
          #   "request_id":"$context.requestId",
          #   "api_id":"$context.apiId",
          #   "resource_path":"$context.resourcePath",
          #   "resource_id":"$context.resourceId",
          #   "http_method":"$context.httpMethod",
          #   "source_ip":"$context.identity.sourceIp",
          #   "user_agent":"$context.identity.userAgent",
          #   "account_id":"$context.identity.accountId",
          #   "caller":"$context.identity.caller",
          #   "user":"$context.identity.user",
          #   "user_arn":"$context.identity.userArn",
          #   "principal_org_id":"$context.identity.principalOrgId",
          #   "integration_latency":"$context.integration.latency"
          # }
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          # Disable data trace in production to avoid logging customer sensitive information from requests and responses
          DataTraceEnabled: !Ref DataTracing
          LoggingLevel: INFO
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      OpenApiVersion: "3.0.0"

  AthenaWorkflowApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-AthenaWorkflow-${Stage}-${Branch}
      RetentionInDays: !Ref RetentionInDays

  AthenaWorkflowApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AthenaWorkflowApiFunction}"
      RetentionInDays: !Ref RetentionInDays

  AthenaWorkflowApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../dist/athena-workflow-api-lambda.zip
      Handler: bootstrap
      Environment:
        Variables:
          ATHENA_DATABASE: !Ref AthenaDatabase
          ATHENA_CATALOG: !Ref AthenaCatalog
          ATHENA_WORKGROUP: !Ref AthenaWorkGroup
          QUERY_TEMPLATES_BUCKET: !Ref QueryTemplatesBucket
      Policies:
        - AthenaQueryPolicy:
            WorkGroupName: !Ref AthenaWorkGroup
        - S3ReadPolicy:
            BucketName: !Ref DataBucketName
        - S3ReadPolicy:
            BucketName: !Ref ResultsBucketName
        - S3WritePolicy:
            BucketName: !Ref ResultsBucketName
        - S3CrudPolicy:
            BucketName: !Ref QueryTemplatesBucket
      Events:
        AnyApi:
          Type: Api
          Properties:
            RestApiId: !Ref AthenaWorkflowApi
            Path: "/*"
            Method: "*"
      AutoPublishAlias: live

  # Alarms used in canary deployment for Applications API.
  ApiAvailability:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: false
      AlarmDescription: !Sub "Api availability is lower than 90%. Only used in canary deployment for Lambda ${AthenaWorkflowApiFunction}"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref AWS::StackName
      EvaluationPeriods: 5
      MetricName: 5XXErrors
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Average
      Threshold: 0.1
      TreatMissingData: notBreaching
  Api4xxErrors:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: false
      AlarmDescription: !Sub "Api 4xx Errors are more than 30%. Only used in canary deployment for Lambda ${AthenaWorkflowApiFunction}"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref AWS::StackName
      EvaluationPeriods: 5
      MetricName: 4XXErrors
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Average
      Threshold: 0.3
      TreatMissingData: notBreaching
  ApiLatencyP50:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: false
      AlarmDescription: !Sub "Api latency p50 is too high. Only used in canary deployment for Lambda ${AthenaWorkflowApiFunction}"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref AWS::StackName
      EvaluationPeriods: 5
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Period: 60
      ExtendedStatistic: p50
      Threshold: 200
      TreatMissingData: notBreaching

  ApiId:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/config/${AppName}/${Stage}/${Branch}/ApplicationsApi/Id"
      Type: "String"
      Value: !Ref AthenaWorkflowApi
      Description: "ApplicationsApi Id"

  QueryTemplatesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  QueryTemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref QueryTemplatesBucket
      PolicyDocument:
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action:
              - s3:*
            Resource:
              - Fn::Sub: arn:aws:s3:::${QueryTemplatesBucket}/*
              - Fn::Sub: arn:aws:s3:::${QueryTemplatesBucket}
            Condition:
              Bool:
                aws:SecureTransport: false
