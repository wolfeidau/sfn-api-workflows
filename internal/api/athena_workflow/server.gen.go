// Package athena_workflow provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package athena_workflow

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Sigv4Scopes = "sigv4.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Error message
	Message string `json:"message"`
}

// RunAthenaQueryTemplateRequest defines model for RunAthenaQueryTemplateRequest.
type RunAthenaQueryTemplateRequest struct {
	// Parameters A list of values for the parameters in an Athena query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.
	Parameters *[]string `json:"parameters,omitempty"`

	// TemplateData Data to be passed to the Go template.
	TemplateData *map[string]interface{} `json:"template_data,omitempty"`

	// TemplateQuery Template using Go template syntax, which is used to generate the Athena query.
	TemplateQuery string `json:"template_query"`

	// WaitForCompletion If true the operation will wait for the query to complete before returning the results.
	WaitForCompletion bool `json:"wait_for_completion"`
}

// RunAthenaQueryTemplateResponse defines model for RunAthenaQueryTemplateResponse.
type RunAthenaQueryTemplateResponse struct {
	QueryExecutionId    string  `json:"query_execution_id"`
	QueryExecutionState *string `json:"query_execution_state,omitempty"`
	ResultPath          *string `json:"result_path,omitempty"`
}

// RunS3AthenaQueryTemplateRequest defines model for RunS3AthenaQueryTemplateRequest.
type RunS3AthenaQueryTemplateRequest struct {
	// Parameters A list of values for the parameters in an Athena query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.
	Parameters *[]string `json:"parameters,omitempty"`

	// TemplateData Data to be passed to the Go template.
	TemplateData *map[string]interface{} `json:"template_data,omitempty"`

	// TemplateName The name of the template file to execute.
	TemplateName string `json:"template_name"`

	// TemplateParsePatterns List of patterns to parse template files from the S3 bucket, this allows you to use includes to split the template into multiple files.
	TemplateParsePatterns []string `json:"template_parse_patterns"`

	// WaitForCompletion If true the operation will wait for the query to complete before returning the results.
	WaitForCompletion bool `json:"wait_for_completion"`
}

// RunAthenaQueryTemplateJSONRequestBody defines body for RunAthenaQueryTemplate for application/json ContentType.
type RunAthenaQueryTemplateJSONRequestBody = RunAthenaQueryTemplateRequest

// RunS3AthenaQueryTemplateJSONRequestBody defines body for RunS3AthenaQueryTemplate for application/json ContentType.
type RunS3AthenaQueryTemplateJSONRequestBody = RunS3AthenaQueryTemplateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /athena/run_query_template)
	RunAthenaQueryTemplate(ctx echo.Context) error

	// (POST /athena/run_s3_query_template)
	RunS3AthenaQueryTemplate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RunAthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunAthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunAthenaQueryTemplate(ctx)
	return err
}

// RunS3AthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunS3AthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunS3AthenaQueryTemplate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/athena/run_query_template", wrapper.RunAthenaQueryTemplate)
	router.POST(baseURL+"/athena/run_s3_query_template", wrapper.RunS3AthenaQueryTemplate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXT28btxP9KgR/Oa4tOfrlsjcFaQqhLepaKXIIAmG0O9IyocjNkJSsGPvdiyF3V5a0",
	"cl2gQYsiF0PLP4/Dmfcexw+ysJvaGjTeyfxBuqLCDcSfPxBZukNXW+OQB2qyNZJXGKc36Bys40SJriBV",
	"e2WNzNM+0U1n0u9rlLl0npRZy6bJJOGXoAhLmX/oYT42mbwLZuorNPBbQNq/w02tweMdfgno/HkENRBs",
	"0CO58yCmQivnhV2JLeiATqwsCV+hOGwSyggwIp0ovvCR1+Jdhd0OIBRQ11phKRzHYLwCrffC2wEkHokY",
	"3YelEok/dpUqqtMdtigCXctMKo+bGP9Jmvq8ARHs43ebj0UJHs5v/AY8cGhLPsc5LLs4f7Si23p9KIdd",
	"fsLCH+HG8M+BuzqI4JRZP4YTbm883GftFZUToT13jQaJV3AARxk+J0Qmd6D8YmVpwVzUmM49DWO2Ep5C",
	"QmQWAI+LndJa8P6+wKkI3ooWDMUSV5ZQEPpAhq/Aywhd0N49imdprUYwZww9yc9wuB8HEnuJzpcUFfEX",
	"eI9FYMyFKgd5cbrMefA4uDLdcVGDrwbmT645cPqFS80n31X6z6nUwGbAdDkjPMO5ZLheoiulkc9IhcVB",
	"/fXYNZDjv94jmYF6/dxWq1vBwHHP8XlOrMhuYhzziViG4jP6TPhKOQFa250Text4b3AolCl0KDFiuVor",
	"fxy/Mt6KTdBe1bpFf7ogG2VmafLmvDr/bqcZiu608perda7WJpMOi0DK7+f8ridBOrXe/p9/KL5shVAi",
	"yUwmXslp8JUl9RW609sM1uonZPO7v4INfLXmCmq1Bo872F9B8FW3bufmEb/h05VZ2QHV385audVkt4pr",
	"z2LhrwJdfGR2lj6vtN2JCnXN1pFJr7yOASYneN+tmN7OZCa3SC6h31yPr8dca1ujgVrJXE7iUCbZCGMK",
	"RhBBRhRMcvVFl9ToWDb52HHUvzt2m6Pnj3UclC4FmFJQMKI1KGF7w4ozkQ7uMRlaNRRgxFLb4nNc9zS5",
	"MmGphXq0YPYmbuWBArRGipi11bpH4vchRPr1ZJ6VMr/wPMlESXT+tS1jN1BY49HEjESjLSLE6JNL2kkd",
	"I/96QbiSufzf6NBSjtp+cvR0axfJcm5oByfODknn66byiRI9KB2vdpARSze9ffGZjfV+OR5/85u0r/qF",
	"q6RqERjhQsEsXwWtoyW9+htjO27ZB0KZGfYK0GKOtEUSccORUcj8Q28RHz42bCqwduxOKelsM0MeoIzH",
	"dWIXR1l5X/+CvrLMtNtf5++i/JzzFdmwrl5jBVtlSebS4Db6z8FAFjXZe/aaQIqx3po8n4dl9HGTv3iY",
	"vp/n+S2QV3xakx+i6CbvcB1nNGyWJeSs+9HL8c2rq/HkanIzWgVT8FY3evGQatm5ybRWb9vJ6ykxgtri",
	"SJmtTfVwnNQmOzIQN3m2h9wF43qT6Bndd8/aQollejznkz93kUFND3Zn307VTzaDz9C1m4j0XP3HhP1d",
	"Un9JUk2flLNuIVGi7wgIuSzloTNzh+alzWdzIaGtBK62oFUJPuYKtJbPXB0Zx+vzB9kOdkxPqmKGZqdT",
	"t4/+/4kUbpo/AgAA///KAr72dREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
