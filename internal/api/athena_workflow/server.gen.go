// Package athena_workflow provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package athena_workflow

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Sigv4Scopes = "sigv4.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Error message
	Message string `json:"message"`
}

// RunAthenaQueryTemplateRequest defines model for RunAthenaQueryTemplateRequest.
type RunAthenaQueryTemplateRequest struct {
	// Parameters ordered list of query parameters
	Parameters []string `json:"parameters"`
	Query      string   `json:"query"`
}

// RunAthenaQueryTemplateResponse defines model for RunAthenaQueryTemplateResponse.
type RunAthenaQueryTemplateResponse struct {
	QueryExecutionId    string `json:"query_execution_id"`
	QueryExecutionState string `json:"query_execution_state"`
	ResultPath          string `json:"result_path"`
}

// RunS3AthenaQueryTemplateRequest defines model for RunS3AthenaQueryTemplateRequest.
type RunS3AthenaQueryTemplateRequest struct {
	Athena struct {
		Catalogue string `json:"catalogue"`
		Database  string `json:"database"`
		Workgroup string `json:"workgroup"`
	} `json:"athena"`
	Parameters      map[string]interface{} `json:"parameters"`
	S3QueryTemplate struct {
		Bucket string `json:"bucket"`
		Key    string `json:"key"`
	} `json:"s3_query_template"`
}

// RunAthenaQueryTemplateJSONRequestBody defines body for RunAthenaQueryTemplate for application/json ContentType.
type RunAthenaQueryTemplateJSONRequestBody = RunAthenaQueryTemplateRequest

// RunS3AthenaQueryTemplateJSONRequestBody defines body for RunS3AthenaQueryTemplate for application/json ContentType.
type RunS3AthenaQueryTemplateJSONRequestBody = RunS3AthenaQueryTemplateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /athena/run_query_template)
	RunAthenaQueryTemplate(ctx echo.Context) error

	// (POST /athena/run_s3_query_template)
	RunS3AthenaQueryTemplate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RunAthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunAthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunAthenaQueryTemplate(ctx)
	return err
}

// RunS3AthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunS3AthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunS3AthenaQueryTemplate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/athena/run_query_template", wrapper.RunAthenaQueryTemplate)
	router.POST(baseURL+"/athena/run_s3_query_template", wrapper.RunS3AthenaQueryTemplate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/jNgz+VwTtHp06vexe/JYDdkAxDOuaAvdQFAVrM7autqRSVNpe4f99kOT8atxc",
	"O+xehj3FMUXq+0h+pJ9laTprNGp2sniWrmywg/j4G5GhC3TWaIfhhSVjkVhhNHfoHNTRUKErSVlWRssi",
	"+Ym1OZP8ZFEW0jEpXcu+zyThvVeElSyuNmGu+0xeeD3nBjX85ZGeLrGzLTBe4L1Hx4cILBB0yEjuEISh",
	"Cgkr0SrHwizFfYgodjwyqRi76PkC4AYxEMFT+B+dR06+oLIXPflkEiIheb2Jam6/YcnyCN3XMh5D3uAj",
	"lj6wvFHVKPqXxxwD4+hJQudbvrHAzY/Zjdz+2l37kV+hvpi9p9ZDGg/el8DQmtqPE6yA4RbcuPHB0F1N",
	"xtsfc9/eshNzN8IYx/32PDC72U3KHg/cD8nd+vIOeRT8Hb6hIQf/dPoQ4rH2PUR3pJUDGyw9KX5ahPmR",
	"0DtVr34NDyoIskGokGQmNXTBd+65MaS+QxTsVnNW/Y5BN48T6OC70ROwqgbGB3iagOdmfe7BLWL8Ptyu",
	"9NIczoD5+Zl4aFTZCEtmpSp0IhQv/CvROaVrESq4bM2DaLC1iTkrbiPAyFZ8XZ+Yn5/JTK6QXIp+ejI9",
	"mYZSGIsarJKFnMVXofLcxBTkKWU5eT1WbJM6fR/1hddOwDCw1seF0WIABLoShOxJO8ENiiS1gDy0Tkzn",
	"WZXijAhMppqj48+mii1UGs2oIxCwtlVlDJF/cwHNeiGEpw+ES1nIX/LtxsiHdZEfn9yxRvssLxvcmcbZ",
	"lmigl7ImKmRQrZO7bcrkMU2uOCRjlj9Opz+dyDCTX2GSikWghfNl6K2lb9u4Oj79i9j2F/IIlDPNSBpa",
	"sUBaIYnosCdPWVxthHl13QcpQ+2C+rfiHlOe0ox1aq6AsmG2fyA3JjTa+Z+Ly9j0znFDxtfNZ2xgpQzJ",
	"QmpcRdVvZXtjyTwGhXtSIdYXXRQLfxv3rS4+PM+/LoriHIhVuK0vtijWxguso6WF7raCIqgt/zg9/TSZ",
	"ziaz03zpdRlcXf7hOdVyreG5VV8G48mcQgS1wlzplUn1cCGpfbYn2/Ex/Q7lpgmknGgNVFiJJZlOLGb/",
	"TNGjS/Pnafrojn6Dqt1MpB3x35L1/4J6l6D6TVIONnTqiM0WJgxlqcSm7932g2HIZ/9KQgcFTFbQqgo4",
	"5graVr7xdPrIbNvwM7xcN3oSVejQ7KXpfOcTL7Zw3/8dAAD//95wxyZRDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
