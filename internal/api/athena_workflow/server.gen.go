// Package athena_workflow provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package athena_workflow

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Sigv4Scopes = "sigv4.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Error message
	Message string `json:"message"`
}

// RunAthenaQueryTemplateRequest defines model for RunAthenaQueryTemplateRequest.
type RunAthenaQueryTemplateRequest struct {
	Query *struct {
		// Parameters ordered list of query parameters
		Parameters *[]string `json:"parameters,omitempty"`
	} `json:"query,omitempty"`
	TemplateData      *map[string]interface{} `json:"template_data,omitempty"`
	TemplateQuery     string                  `json:"template_query"`
	WaitForCompletion bool                    `json:"wait_for_completion"`
}

// RunAthenaQueryTemplateResponse defines model for RunAthenaQueryTemplateResponse.
type RunAthenaQueryTemplateResponse struct {
	QueryExecutionId    string  `json:"query_execution_id"`
	QueryExecutionState *string `json:"query_execution_state,omitempty"`
	ResultPath          *string `json:"result_path,omitempty"`
}

// RunS3AthenaQueryTemplateRequest defines model for RunS3AthenaQueryTemplateRequest.
type RunS3AthenaQueryTemplateRequest struct {
	Query *struct {
		// Parameters ordered list of query parameters
		Parameters *[]string `json:"parameters,omitempty"`
	} `json:"query,omitempty"`
	Template struct {
		Parameters  *map[string]interface{} `json:"parameters,omitempty"`
		S3QueryFile struct {
			Bucket string `json:"bucket"`
			Key    string `json:"key"`
		} `json:"s3_query_file"`
	} `json:"template"`
}

// RunAthenaQueryTemplateJSONRequestBody defines body for RunAthenaQueryTemplate for application/json ContentType.
type RunAthenaQueryTemplateJSONRequestBody = RunAthenaQueryTemplateRequest

// RunS3AthenaQueryTemplateJSONRequestBody defines body for RunS3AthenaQueryTemplate for application/json ContentType.
type RunS3AthenaQueryTemplateJSONRequestBody = RunS3AthenaQueryTemplateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /athena/run_query_template)
	RunAthenaQueryTemplate(ctx echo.Context) error

	// (POST /athena/run_s3_query_template)
	RunS3AthenaQueryTemplate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RunAthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunAthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunAthenaQueryTemplate(ctx)
	return err
}

// RunS3AthenaQueryTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) RunS3AthenaQueryTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RunS3AthenaQueryTemplate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/athena/run_query_template", wrapper.RunAthenaQueryTemplate)
	router.POST(baseURL+"/athena/run_s3_query_template", wrapper.RunS3AthenaQueryTemplate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWT28jtw/9KoJ+OY5jJ/7tZW4O0C2ComgaB9hDEBjMDO3RZiwpFGXHG8x3LySNx/8m",
	"m+2iiwKL3myJ5DySj496lYVZWqNRs5P5q3RFhUuIP38hMnSLzhrtMBxYMhaJFcbrJToHi3hRoitIWVZG",
	"yzz5ie11JnljUebSMSm9kE2TScJnrwhLmd93YR6aTN56PeEKNfzpkTZ3uLQ1MN7is0fHpwieg9XpsQWC",
	"JTKSO8VmqETCUtTKsTBzEUOIPY9MKsZl9DzC3SUCRLCJebQH5vEzFhwtWsizEhj2YvRYdOBPPrMGxbO5",
	"oVnoTI0JeWf3aEyNoE/qeBS4P8xDD+a3iv5W32P8Gb5g4UPMmSp7szg2cwyMvZaEztc8s8BVz/1Rmj1f",
	"fyOp6fjn4NJ7oE4c3ThxYDZXdY/3oy+ekHtBPeHm/Q60/sn6tPZH1odg3jXvku61dFh4UryZBpFK2Ti1",
	"WP0//FChJRVCiSQzqWEZfCeeK0PqC8SW7apu1W8YZuRlAEv4YvQArFoA4xo2A/Bcbe3WbhrjN+HrSs/N",
	"KQsmN9diXamiEpbMSpXoRBj+8K9A55ReiLWhp3lt1qLC2iZisOI6AowUFZ+2FpOba5nJFZJL0S/OR+ej",
	"0BpjUYNVMpfjeJTJMC+xBEOIQYbkdVvrA+qYRPdD1LdeOwEtZbfmwmjRAgJdCkL2pJ3gCkWa0YA8UCmW",
	"87pMcXqmTKamouMrU0ZKFUYz6ggErK1VEUMMP7ukbWnrhF9nhHOZy/8Nd2tp2O6k4dfXQ+zRYZZ3Fe7N",
	"Y7ZLNKSXqiZKZFC1k/s8ZPKYhClqYKzy5Wj0wxNpJfeNTFKzCLRwvgjcmvu63gRyfPgHsR1u/R4o15qR",
	"NNRiirRCEtEhobj8Fyt0BaX4NY1wtmVxYrAAEZaPd8JwhSS4OiqhcEYoFnNQNZaCjSCvI+vTUthXHpnf",
	"d5pz/9AElYKFC8qV6BR0q09UlGZcpLkJqVfM9nfkyoQZuvljehfn2TmuyPhFdYUVrJQhmUuNqyhoO0Wa",
	"WTIvQbw8qRDro87zqX+My0TnZ6+TT9M8vwFiFb7W5DsU28tbXMSbGpaPJeRBSIaXo4sPg9F4ML4Yzr0u",
	"gqsbnr2mQm7laWLVx/byfEIhglrhUOmVSU12oTFNdqBI3QL4XlFK4qqcqA2UWIo5maWYjr9PrHofBT9O",
	"rr76BvkGwXJjkdbfz6VY/w3U3xqopivKyeMjMaJ7YBCGtpSi473bvYXaejZvFLSdgMEKalUCx1pBXctv",
	"tI6MC/b5q2wPt0RPQxUYmh1f3ey9ZCOFm+avAAAA//817Ua7kQ4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
